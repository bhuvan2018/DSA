#include<stdio.h>
#include<stdlib.h>
int cost[10][10],n,v1,v2;
int root[10];
void findmin(){
int min=999,i,j;
for(i=0;i<n;i++){
for(j=0;j<n;j++){
if(cost[i][j]!=0&&cost[i][j]<=min){
min=cost[i][j];
v1=i;
v2=j;
}
}
}
}
void read_mat(){
int i,j;
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&cost[i][j]);
}
void print_mat(){
int i,j;
for(i=0;i<n;i++){
for(j=0;j<n;j++){
printf("%d\t",cost[i][j]);
}
printf("\n");
}
}
void dounion(){
int temp,i;
temp=root[v2];
for(i=0;i<n;i++){
if(root[i]==temp)
root[i]=root[v1];
}
}
void kruskal(){
int i,edgemin,tot=0;
for(i=0;i<n;i++)
root[i]=i;
i=0;
while(i!=n-1){
findmin();
edgemin=cost[v1][v2];
cost[v1][v2]=cost[v2][v1]=0;
if(root[v1]!=root[v2]){
printf("\n%d--->%d=%d\n",v1,v2,edgemin);
dounion();
tot+=edgemin;
i++;
}
}
printf("\nMincost=%d",tot);
}
void main(){
printf("Enter the no of vertices: ");
scanf("%d",&n);
printf("\nEnter cam");
read_mat();
printf("===CAM===\n");
print_mat();
kruskal();
}
